{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { DomHandler } from 'primeng/dom';\nimport * as i1 from 'primeng/api';\nclass AutoFocus {\n  constructor(host, licenseManager) {\n    this.host = host;\n    this.licenseManager = licenseManager;\n    this.focused = false;\n  }\n  ngAfterContentChecked() {\n    if (!this.focused) {\n      if (this.autofocus) {\n        const focusableElements = DomHandler.getFocusableElements(this.host.nativeElement);\n        if (focusableElements.length === 0) {\n          this.host.nativeElement.focus();\n        }\n        if (focusableElements.length > 0) {\n          focusableElements[0].focus();\n        }\n        this.focused = true;\n      }\n    }\n  }\n  ngAfterViewInit() {\n    this.licenseManager['check']();\n  }\n}\nAutoFocus.ɵfac = function AutoFocus_Factory(t) {\n  return new (t || AutoFocus)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.LicenseManager));\n};\nAutoFocus.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: AutoFocus,\n  selectors: [[\"\", \"pAutoFocus\", \"\"]],\n  hostAttrs: [1, \"p-element\"],\n  inputs: {\n    autofocus: \"autofocus\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[pAutoFocus]',\n      host: {\n        class: 'p-element'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.LicenseManager\n    }];\n  }, {\n    autofocus: [{\n      type: Input\n    }]\n  });\n})();\nclass AutoFocusModule {}\nAutoFocusModule.ɵfac = function AutoFocusModule_Factory(t) {\n  return new (t || AutoFocusModule)();\n};\nAutoFocusModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AutoFocusModule\n});\nAutoFocusModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AutoFocusModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [AutoFocus],\n      declarations: [AutoFocus]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutoFocus, AutoFocusModule };","map":{"version":3,"names":["CommonModule","i0","Directive","Input","NgModule","DomHandler","i1","AutoFocus","constructor","host","licenseManager","focused","ngAfterContentChecked","autofocus","focusableElements","getFocusableElements","nativeElement","length","focus","ngAfterViewInit","ɵfac","ElementRef","LicenseManager","ɵdir","type","args","selector","class","AutoFocusModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/angular/front/node_modules/primeng/fesm2020/primeng-autofocus.mjs"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, NgModule } from '@angular/core';\nimport { DomHandler } from 'primeng/dom';\nimport * as i1 from 'primeng/api';\n\nclass AutoFocus {\n    constructor(host, licenseManager) {\n        this.host = host;\n        this.licenseManager = licenseManager;\n        this.focused = false;\n    }\n    ngAfterContentChecked() {\n        if (!this.focused) {\n            if (this.autofocus) {\n                const focusableElements = DomHandler.getFocusableElements(this.host.nativeElement);\n                if (focusableElements.length === 0) {\n                    this.host.nativeElement.focus();\n                }\n                if (focusableElements.length > 0) {\n                    focusableElements[0].focus();\n                }\n                this.focused = true;\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this.licenseManager['check']();\n    }\n}\nAutoFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocus, deps: [{ token: i0.ElementRef }, { token: i1.LicenseManager }], target: i0.ɵɵFactoryTarget.Directive });\nAutoFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.8\", type: AutoFocus, selector: \"[pAutoFocus]\", inputs: { autofocus: \"autofocus\" }, host: { classAttribute: \"p-element\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocus, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[pAutoFocus]',\n                    host: {\n                        class: 'p-element'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.LicenseManager }]; }, propDecorators: { autofocus: [{\n                type: Input\n            }] } });\nclass AutoFocusModule {\n}\nAutoFocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAutoFocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocusModule, declarations: [AutoFocus], imports: [CommonModule], exports: [AutoFocus] });\nAutoFocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocusModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.8\", ngImport: i0, type: AutoFocusModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [AutoFocus],\n                    declarations: [AutoFocus]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutoFocus, AutoFocusModule };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;AAC9C,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,SAAS,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;AAC1D,SAASC,UAAU,QAAQ,aAAa;AACxC,OAAO,KAAKC,EAAE,MAAM,aAAa;AAEjC,MAAMC,SAAS,CAAC;EACZC,WAAW,CAACC,IAAI,EAAEC,cAAc,EAAE;IAC9B,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,OAAO,GAAG,KAAK;EACxB;EACAC,qBAAqB,GAAG;IACpB,IAAI,CAAC,IAAI,CAACD,OAAO,EAAE;MACf,IAAI,IAAI,CAACE,SAAS,EAAE;QAChB,MAAMC,iBAAiB,GAAGT,UAAU,CAACU,oBAAoB,CAAC,IAAI,CAACN,IAAI,CAACO,aAAa,CAAC;QAClF,IAAIF,iBAAiB,CAACG,MAAM,KAAK,CAAC,EAAE;UAChC,IAAI,CAACR,IAAI,CAACO,aAAa,CAACE,KAAK,EAAE;QACnC;QACA,IAAIJ,iBAAiB,CAACG,MAAM,GAAG,CAAC,EAAE;UAC9BH,iBAAiB,CAAC,CAAC,CAAC,CAACI,KAAK,EAAE;QAChC;QACA,IAAI,CAACP,OAAO,GAAG,IAAI;MACvB;IACJ;EACJ;EACAQ,eAAe,GAAG;IACd,IAAI,CAACT,cAAc,CAAC,OAAO,CAAC,EAAE;EAClC;AACJ;AACAH,SAAS,CAACa,IAAI;EAAA,iBAAwFb,SAAS,EAAnBN,EAAE,mBAAmCA,EAAE,CAACoB,UAAU,GAAlDpB,EAAE,mBAA6DK,EAAE,CAACgB,cAAc;AAAA,CAA4C;AACxNf,SAAS,CAACgB,IAAI,kBAD8EtB,EAAE;EAAA,MACJM,SAAS;EAAA;EAAA;EAAA;IAAA;EAAA;AAAA,EAAsH;AACzN;EAAA,mDAF4FN,EAAE,mBAEHM,SAAS,EAAc,CAAC;IACvGiB,IAAI,EAAEtB,SAAS;IACfuB,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE,cAAc;MACxBjB,IAAI,EAAE;QACFkB,KAAK,EAAE;MACX;IACJ,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEH,IAAI,EAAEvB,EAAE,CAACoB;IAAW,CAAC,EAAE;MAAEG,IAAI,EAAElB,EAAE,CAACgB;IAAe,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAET,SAAS,EAAE,CAAC;MAC1HW,IAAI,EAAErB;IACV,CAAC;EAAE,CAAC;AAAA;AAChB,MAAMyB,eAAe,CAAC;AAEtBA,eAAe,CAACR,IAAI;EAAA,iBAAwFQ,eAAe;AAAA,CAAkD;AAC7KA,eAAe,CAACC,IAAI,kBAhBwE5B,EAAE;EAAA,MAgBe2B;AAAe,EAA6E;AACzMA,eAAe,CAACE,IAAI,kBAjBwE7B,EAAE;EAAA,UAiB0CD,YAAY;AAAA,EAAI;AACxJ;EAAA,mDAlB4FC,EAAE,mBAkBH2B,eAAe,EAAc,CAAC;IAC7GJ,IAAI,EAAEpB,QAAQ;IACdqB,IAAI,EAAE,CAAC;MACCM,OAAO,EAAE,CAAC/B,YAAY,CAAC;MACvBgC,OAAO,EAAE,CAACzB,SAAS,CAAC;MACpB0B,YAAY,EAAE,CAAC1B,SAAS;IAC5B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASA,SAAS,EAAEqB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}